---
name: CI Build
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Set up Python 3.10'
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: python -m pip install -r dev-requirements.txt
      # - name: SCA
      #   run: |
      #     flawfinder src/
      - name: Lint
        run: |
          python -m isort --check **/*.py
          python -m black --check **/*.py
  build:
    runs-on: ${{ matrix.python.os }}
    needs: [sca]
    strategy:
      matrix:
        python:
          # - {os: ubuntu-latest, version: '3.6', pyver: cp36}
          - {os: ubuntu-latest, version: '3.7', pyver: cp37}
          # - {os: ubuntu-latest, version: '3.8', pyver: cp38}
          # - {os: ubuntu-latest, version: '3.9', pyver: cp39}
    env:
      python: python${{ matrix.python.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
      - name: Run build
        run: |
          docker run \
            --rm \
            --volume ${{ github.workspace }}:/io:rw \
            --workdir /io \
            quay.io/pypa/manylinux2014_x86_64:latest \
            bash -exc "yum update-minimal --security -y \
              && yum install -y \
                gcc \
                nss \
                nss-devel \
                nss-tools \
                nspr-devel \
              && ${{ env.python }} -m venv .env \
              && source .env/bin/activate \
              && pip install -U auditwheel pip sphinx setuptools wheel \
              && pip install -r requirements.txt \
              && python setup.py bdist_wheel \
              && auditwheel repair \
                dist/python_nss-*${{ matrix.python.pyver }}*-linux*.whl \
              && deactivate"
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-wheel
          path: wheelhouse
  test:
    runs-on: ${{ matrix.python.os }}
    needs: build
    strategy:
      matrix:
        python:
          # - {os: ubuntu-latest, version: '3.6', pyver: cp36}
          - {os: ubuntu-latest, version: '3.7', pyver: cp37}
          # - {os: ubuntu-latest, version: '3.8', pyver: cp38}
          # - {os: ubuntu-latest, version: '3.9', pyver: cp39}
          # - {os: ubuntu-latest, version: '3.10', pyver: cp310}
    env:
      python: python${{ matrix.python.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Download versioned files
        uses: actions/download-artifact@v3
        with:
          name: linux-wheel
      - name: Run build
        run: |
          docker run \
            --rm \
            --env LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu/nss \
            --volume ${{ github.workspace }}:/io:rw \
            --workdir /io \
            python:${{ matrix.python.version }}-buster \
            bash -exc "apt-get update \
              && apt install -y libnspr4 libnss3 libnss3-tools \
              && ls /usr/lib/x86_64-linux-gnu/nss \
              && ${{ env.python }} -m venv .env \
              && source .env/bin/activate \
              && ${{ env.python }} -m pip install -r dev-requirements.txt \
              && ${{ env.python }} -m pip install \
                $(basename python_nss*${{ matrix.python.pyver }}*.whl) \
              && tests/run_tests.py \
              && deactivate"
  publish:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - uses: actions/checkout@v3
      - name: 'Set up Python 3.10'
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Download versioned files
        uses: actions/download-artifact@v3
        with:
          name: linux-wheel
      - name: Install packaging tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
      - name: Publish artifacts
        run: |
          twine upload \
            --non-interactive \
            --repository-url 'https://test.pypi.org/legacy/' \
            --username __token__ \
            --password "${{ secrets.TESTPYPI_TOKEN }}" \
            --skip-existing \
            ./python_nss*.whl
